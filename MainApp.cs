using System; //네임스페이스 전체를 사용한다. System.Console.WriteLine() -> Console.WriteLine()
using static System.Console;

namespace Hello //비슷한 것들끼리 하나의 이름 아래 묶음.
{
    class MainApp /* MainApp이라는 클래스(c#프로그램을 구성하는 기본단위)를 만듦.
                     클래스: 데이터와 데이터를 처리하는 기능(메소드)으로 구성됨.*/
    {
        static void Main(string[] args) //Main() 메소드. c의 Main함수랑 비슷.
         //static은 한정자. 메소드나 변수 등을 수식.
         // static 키워드로 수식되는 코드는 프로그램이 처음 구동될 때부터 메모리에 할당된다. 
        {
            //문자열 보간: $"텍스트{보간식[,길이] [:서식]}텍스트{...}..."

            Console.WriteLine($"3>4 : {3 > 4}");
            // {3 > 4}는 비교 연산식.  3이 4보다 큰지 비교하여 결과를 true 또는 false로 반환.
            // 콘솔에  3>4 : False  를 출력

            Console.WriteLine($"3>=4 : {3 >= 4}");
            Console.WriteLine($"3<4 : {3 < 4}");

            //C#에서 문자열을 콘솔에 출력하는 Console.WriteLine() 함수
            //$" 문자를 이용한 문자열 보간 기능
            //문자열 보간: 문자열 내에 변수나 식의 값을 삽입하는 기능
            //$" 문자 다음에 오는 문자열 내에서 {} 안에 변수나 식을 넣으면, 해당 변수나 식의 값이 문자열에 삽입되어 출력됨

            //{} 안에 있는 내용이 보간식

            //보간식 안에 : 다음에 서식 지정자를 추가함. ex) {age:D3}은 3자리 정수 형태
            //하나의 문자열 보간식 안에 여러 개의 보간식이나 문자열을 사용할 수 있음. 각 보간식은 {}로 구분함
            //예시: "이름: {name}, 나이: {age}"

            //보간식 안에 , 다음에 정렬할 칸 수를 지정함.
            //예시: {name,10} (10칸 확보, 오른쪽 정렬), {age,-5} (5칸 확보, 왼쪽 정렬)

            //하나의 보간식 안에 서식과 정렬을 모두 지정하여 원하는 형태로 값을 출력할 수 있음
            //int age = 30;
            //double pi = 3.141592;
            //Console.WriteLine($"나이: {age,-5:D3}세");   // 좌측 정렬, 5칸 확보, 3자리 정수
            //Console.WriteLine($"원주율: {pi,10:F2}");  // 우측 정렬, 10칸 확보, 소수점 둘째 자리
            //출력 결과
            //나이: 030  세
            //원주율:       3.14



        }
    }
}
